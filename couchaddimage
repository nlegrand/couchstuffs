#!/usr/bin/env python

import os, json, base64, subprocess, sys, mimetypes, httplib, re


file = sys.argv.pop()
#file_prefix = re.sub('-.*', '', os.path.splitext(file)[0])
id = sys.argv.pop()

conn1 = httplib.HTTPConnection("localhost:5984")
conn1.request("GET","/images/_design/mdi")
r1 = conn1.getresponse()
if r1.status != 200:
    sys.stderr.write("Can't connect\n")
    sys.exit()

data          = {}
data['title'] = {}
data['tags']  = {}

for lang in json.loads(r1.read())['langs']:
    sys.stdout.write("title (" + lang + "): " )
    data['title'][lang] = sys.stdin.readline().strip()
    tag = ""
    data['tags'][lang] = []
    sys.stdout.write("tag (" + lang + ") or 'done': " )
    tag = sys.stdin.readline().strip()
    while tag != "done":
        data['tags'][lang].append(tag)
        sys.stdout.write("tag (" + lang + ") or 'done': " )
        tag = sys.stdin.readline().strip()

#don't want portrait thumbnail to be greater than paysage
geometry = os.popen("identify -format \"%w %h\" " + file).read().replace("\n","").split(" ")
if geometry[0] > geometry[1]:
    thumbgeometry = "100"
else:
    thumbgeometry = "x75"

sizes = {
    "thumbnail" : id + "-thumbnail.jpg",
    "small"     : id + "-small.jpg",
    "medium"    : id + "-medium.jpg",
    "large"     : id + "-large.jpg",
    "huge"      : id + "-huge.jpg",
}    

os.system("/usr/local/bin/convert -size " + thumbgeometry + " " + file 
          + " -thumbnail " + thumbgeometry + " " + sizes["thumbnail"])
os.system("/usr/local/bin/convert -size 250 " + file + " -thumbnail 250 " + sizes["small"])
os.system("/usr/local/bin/convert -size 500 " + file + " -thumbnail 500 " + sizes["medium"])
os.system("/usr/local/bin/convert -size 1024 " + file + " -thumbnail 1024 " + sizes["large"])
os.system("/usr/local/bin/convert -size 2048 " + file + " -thumbnail 2048 " + sizes["huge"])

data['_attachments'] = {}

data['_attachments'][id + "-original.jpg"] = {
    "content_type" : mimetypes.guess_type(file)[0],
    "data" : base64.b64encode(open(file, 'rb').read()),
}

for size in sizes:
    if not os.access(sizes[size], 0): #0 is F_OK value, F_OK doesn't work
        sys.stderr.write(sizes[size] + "does not exist, skipping\n")
        continue
    else:
        data['_attachments'][sizes[size]] = {
        "content_type" : mimetypes.guess_type(file)[0],
        "data" : base64.b64encode(open(sizes[size], 'rb').read()),
        }

conn3 = httplib.HTTPConnection("localhost:5984")
conn3.request("PUT","/images/" + id,
             json.dumps(data), {"Content-type": "application/json"})
r3 = conn3.getresponse()

sys.stderr.write(str(r3.status) + " " + r3.reason + "\n")
sys.stdout.write(r3.read() + "\n")

