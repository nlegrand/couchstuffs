#!/usr/bin/env python

import sys, json, os, httplib, pprint, urllib, re, mimetypes, base64

json_data = {}

for file in os.listdir("."):
    if file == 'views':
        json_data[file] = {}
        for view in os.listdir(file):
            if re.search('~$', view):
                continue
            json_data[file][view] = {}
            f = open(os.path.join(file, view, 'map.js'),'r')
            map = re.sub('"', '\"',f.read())
            f.close()
            json_data[file][view] = { 'map' : map}
            if os.path.isfile(os.path.join(file, view, 'reduce.js')):
                f = open(os.path.join(file, view, '/reduce.js','r'))
                reduce = re.sub('"', '\"',f.read())
                f.close()
                json_data['views'][view]['reduce'] = reduce
    elif file == 'shows' or file == 'lists' or file == 'commonjs':
        json_data[file] = {}
        for js in os.listdir(file):
            if re.search("~$", js):
                continue
            f = open(os.path.join(file, js),'r')
            fdata = f.read()
            f.close()
            json_data[file][re.sub('\.js$', '', js)] = fdata
    elif re.search('^exports_', file) and not re.search("~$", file):
        f = open(file, 'r')
        json_data[re.sub('^exports_','', file)] = "exports.str = " + json.dumps(f.read()) + " ;"
    elif not re.search("~$", file) and file != '_attachments':
        #XXX faire une exception ici
        json_data[file] = json.loads(open(file, "r").read())
    elif file == '_attachments':
        json_data['_attachments'] = {}
        for attachment in os.listdir('_attachments'):
            if re.search('~$', attachment):
                continue
            mime = mimetypes.guess_type('_attachments' + attachment)[0]
            if not mime:
                sys.stderr.write("Can't guess _attachments/" + attachment + "mime-type")
                continue
            b = open('_attachments/' + attachment, 'rb')
            content = base64.b64encode(b.read())
            json_data['_attachments'][attachment] = {
                "content_type" : mime,
                "data" : content
                }
        

print json.dumps(json_data)


